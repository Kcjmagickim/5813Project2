#include <stdint.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <cmocka.h>

#include "test.h"
#include "memory.h"

uint8_t i = 16;

static void test_memmove1(){
	uint8_t * test;
  	test=my_memmove(NULL,NULL,i);
	assert_null(test);
}

static void test_memmove2(){
	uint8_t i;
  	uint8_t * set;
  	uint8_t * ptra;
  	uint8_t * ptrb;

	set = (uint8_t*)reserve_words(i);
	assert_non_null(set);

	ptra = &set[8];
	ptrb = &set[0];

	for( i = 0; i < 8; i++){
		set[i] = i;
	}

	my_memmove(ptra, ptrb, 8);

	for (i = 0; i < 8; i++){
		assert_int_equal(i,set[i+8]);
	}

//SRC in DST region Overlap - Should succeed at this
//DST in SRC region Overlap - Should succeed at this
//DST == SRC - Should be successful and likely skip 
	free_words( (uint32_t*)set );
}
